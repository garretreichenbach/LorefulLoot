plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

def starmadeDirectory = project.property("starmade_root")
def modName = project.property("mod_name")
group = project.property('mod_org_id')
version = project.property('mod_version')
mainClassName = group + modName

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation(files(starmadeDirectory + "StarMade.jar"))
    implementation(fileTree(dir: (starmadeDirectory + "lib"), include: "*.jar"))
    implementation(fileTree(dir: ("lib"), include: "*.jar"))
}

compileJava.options.encoding = 'UTF-8'

tasks.register("updateVersion") {
    doLast {
        def modJson = file('src/main/resources/mod.json')
        def modJsonContent = modJson.getText()
        modJsonContent = modJsonContent.replaceAll(/"version":\s*".*"/, "\"version\": \"" + version + "\"")
        modJson.write(modJsonContent)
    }
}

tasks.register("zipDefaultScripts", Zip) {
    from 'src/main/resources/default_scripts'
    include '**/*'
    archiveFileName = 'default_scripts.zip'
    destinationDirectory = file('src/main/resources')
    doFirst {
        def defaultScriptsDir = file('src/main/resources/default_scripts')
        if (!defaultScriptsDir.exists()) {
            throw new GradleException("Default scripts directory does not exist: " + defaultScriptsDir.getAbsolutePath())
        }
    }
}

tasks.register("zipDefaultBlueprints", Zip) {
    from 'src/main/resources/default_blueprints'
    include '**/*'
    archiveFileName = 'default_blueprints.zip'
    destinationDirectory = file('src/main/resources')
    doFirst {
        def defaultBlueprintsDir = file('src/main/resources/default_blueprints')
        if (!defaultBlueprintsDir.exists()) {
            throw new GradleException("Default blueprints directory does not exist: " + defaultBlueprintsDir.getAbsolutePath())
        }
    }
}

jar {
    dependsOn("updateVersion", "zipDefaultScripts", "zipDefaultBlueprints")
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    destinationDirectory.set(file(starmadeDirectory + "mods"))
    archiveFileName = modName + 'v' + getVersion() +  '.jar'
    manifest.attributes('Main-Class': mainClassName)
    from('src/main/resources/default_scripts.zip')
    from('src/main/resources/default_blueprints.zip')
    from {
        configurations.runtimeClasspath.collect {
            if(!it.getPath().contains("StarMade") && it.getName().endsWith(".jar")) it.isDirectory() ? it : zipTree(it)
            else return null;
        }
    }
}